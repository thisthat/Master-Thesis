	print 'finish link'
	return topology

def doRequest():
    #client_name = random.choice(hostToUse)
    #server_name = random.choice(hostNotUsed)
    #print client_name
    client = random.choice(clients)
    server = random.choice(servers)
    _cmd = "curl -G http://{0}:9004/media/{1} &" .  format( server.IP(), filename )
    #The following line is the one that slow down everything! cmd -> popen seems like to resolve the problem
    client.cmd( _cmd )
    #print client
    #Get video from server
    #curl -G http://127.0.0.1:9004/media/{Name}
    #Test n Requests
    urllib2.urlopen('http://127.0.0.1/server.php')

class myThread (threading.Thread):
    def __init__(self, threadID):
        threading.Thread.__init__(self)
        self.threadID = threadID
    def run(self):
        doRequest()

threads = []
clients = []
servers = []

if __name__ == '__main__':
    #Mininet Start
    call("mn -c", shell=True)
    net = Mininet(controller=partial( RemoteController, ip='127.0.0.1', port=6653 ), topo=buildTopo(), link=TCLink, switch=OVSKernelSwitch)
    print hosts
    dim = math.ceil(len(hosts) / 2)
    hostToUse =  random.sample(hosts, int(dim) )
    hostNotUsed = [item for item in hosts if item not in hostToUse]
    #Get the server from one of the not used hosts
    for server_name in hostNotUsed:
        server = net.get(server_name)
        servers.append(server)
        server.cmd("java -jar server-0.0.1-SNAPSHOT.jar --ip={0} --server.port=9004 &" . format(server.IP()))
    for client_name in hostToUse:
        client = net.get(client_name)
        clients.append(client)
    #print hostToUse
    counter = 0
    for i in requests:
        print "request {0}-th" . format(counter)
        counter = counter + 1
        tInit = int(time.time())
        t = tInit
        toks = i / timeSpan
        bucket = TokenBucket(int(toks / 2), i, toks)
        while t - tInit < timeSpan :
            t = int(time.time())
            if bucket.consume(1) :
                doRequest()
                #chose the client randomly
                #th = myThread(i)
                #threads.append(th)
                #th.start()
    #wait close of all thread
    #for t in threads:
    #   t.join()
    print 'All Done :)'
